#LAB:
#Разработал: Славашевский Сергей Витальевич
#Designed by: Slavasheuski Siarhei Vitalevich

"""
     ----------------------------------------------------------------------------------------
    |Провести расчет по формуле:  подъемной силы от угла атаки данного профиля крыла.        |
    |В решении производится два параллельных вычисления:Сy=f*a; Y=Cy*0.5*p*V**2*S            |
    |Динамическими данными являются угол атаки: а; плотность сухого воздуха тропосферы       |
    | при средней температуре: p, в зависимости от высоты над уровнем моря.                  |
    |                                                                                        |
    |    Составить программный вычислительный алгоритм в двух потоках для определения        |
    |максимального (а-max) и критического (сваливания) (а-crit) углов атаки, допустимых для  |
    |данного профиля крыла без механизации при разных плотностях воздуха.                    |
    |   Код программы оформить в классе с применением                                        |
    |атрибутов и методов класса: @classmethod и отобразить на графике.                       |
    |                                                                                        |
     ----------------------------------------------------------------------------------------

"""
from threading import Thread
import math as mt
import matplotlib.pyplot as plt

class LiftAngle():
   
    V = float(input("УКАЖИТЕ СКОРОСТЬ ПОЛЕТА Л/А(m/s): "))
    S = float(input("УКАЖИТЕ ПЛОЩАДЬ КРЫЛА Л/А(m2): "))
    p = float(input("Введите значение плотности воздуха(кг/м3): "))
    f = 3.5 # (%)
    a = [-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] # углы атаки

    @classmethod
    def Calc_Cy(cls):
        return list(map(lambda x: x * cls.f, cls.a))

    @classmethod
    def Calc_Y(cls):
        Cy = cls.Calc_Cy()
        return list(map(lambda x: x * 0.5 * cls.p * cls.V**2 * cls.S, Cy))

    def __init__(self):
        self.x = self.a
        self.y = self.Calc_Cy()

        self.x_1 = self.a
        self.y_1 = self.Calc_Y()

    def graph(self):
        plt.plot(self.x, self.y)           
        plt.grid()
        plt.title('График зависимости коэффициента\n подъемной силы от угла атаки')
        plt.xlabel('Угол атаки a')
        plt.ylabel('Коэффициент подъемной силы Cy')
        plt.show()

        plt.plot(self.x_1, self.y_1)           
        plt.grid()
        plt.title('График зависимости подъемной силы\n от угла атаки')
        plt.xlabel('Угол атаки a')
        plt.ylabel('Подъемная сила Y')
        plt.show()

if __name__ == '__main__':

    res = LiftAngle()
    
    thread = Thread(target = res.graph())
    thread.start()
    thread.join()

p = [1.2250,1.1898,1.1750,1.1603,1.1459,1.1316,1.1175,1.1036,1.0899,1.0763,1.0629] # плотность воздуха на разных высотах 


